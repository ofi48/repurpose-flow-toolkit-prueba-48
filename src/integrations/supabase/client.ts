
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

const SUPABASE_URL = "https://wowulglaoykdvfuqkpxd.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Indvd3VsZ2xhb3lrZHZmdXFrcHhkIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDY0Mzg2MTksImV4cCI6MjA2MjAxNDYxOX0.iourMiXf87JC0wEinlsKHOjFBBE6SZf79IC3dmpago0";

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY);

// Export constants separately so they can be accessed without modifying the client
export const SUPABASE_ANON_KEY = SUPABASE_PUBLISHABLE_KEY;

/**
 * Helper function to generate a unique file name for uploaded videos
 */
export const generateFileName = (originalName: string) => {
  const timestamp = new Date().getTime();
  const randomString = Math.random().toString(36).substring(2, 10);
  const extension = originalName.split('.').pop();
  return `${timestamp}-${randomString}.${extension}`;
};

/**
 * Helper function to get a public URL for a file in storage
 */
export const getPublicUrl = (bucketName: string, filePath: string) => {
  const { data } = supabase.storage.from(bucketName).getPublicUrl(filePath);
  return data.publicUrl;
};

/**
 * Helper function to upload a file with progress tracking
 */
export const uploadFileWithProgress = async (
  bucketName: string, 
  filePath: string, 
  file: File,
  onProgress?: (progress: number) => void
) => {
  try {
    let lastProgress = 0;
    
    // Using XMLHttpRequest to track upload progress
    const xhr = new XMLHttpRequest();
    
    const uploadPromise = new Promise<{path: string; error: Error | null}>((resolve, reject) => {
      xhr.upload.addEventListener('progress', (event) => {
        if (event.lengthComputable && onProgress) {
          const progressPercent = Math.round((event.loaded / event.total) * 100);
          if (progressPercent !== lastProgress) {
            lastProgress = progressPercent;
            onProgress(progressPercent);
          }
        }
      });
      
      // Upload the file using Supabase storage
      supabase.storage
        .from(bucketName)
        .upload(filePath, file, {
          cacheControl: '3600',
          upsert: false,
        })
        .then(({ data, error }) => {
          if (error) {
            reject(error);
          } else {
            resolve({ path: data.path, error: null });
          }
        })
        .catch(reject);
    });
    
    return await uploadPromise;
  } catch (error) {
    console.error('Error uploading file:', error);
    return { path: '', error };
  }
};
